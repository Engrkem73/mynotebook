// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  notebooks     Notebook[]      // Add relation to notebooks
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

// New model for Notebooks
model Notebook {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text    // For storing notebook content
  isPublic    Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]     // Optional: for categorizing notebooks
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

// Optional: Tags for notebooks
model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  notebooks Notebook[]
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
 
model Account {
  // Keep existing Account model unchanged
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  // Keep existing Session model unchanged
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  // Keep existing VerificationToken model unchanged
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
